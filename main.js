const express = require('express');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const path = require('path');
const fs = require('fs');

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è rate limiting
const limiter = rateLimit({
    windowMs: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
    max: 2000, // –º–∞–∫—Å–∏–º—É–º 2000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
    message: '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    standardHeaders: true,
    legacyHeaders: false,
});

const hourlyLimiter = rateLimit({
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    max: 90, // –º–∞–∫—Å–∏–º—É–º 90 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    message: '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
});

// –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
const V2_SECRET = '6LeIjfMrAAAAACHYrIiLit-YcHU84mAsVgw6ivD-';
const V3_SECRET = '6LeVjfMrAAAAAKWUuhsebDkx_KowYHC135wvupTp';
const REDIRECT_URL = 'https://rekonise.com/best-script-for-nft-battle-and-others-t1ddm';

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('.'));

function verifyBrowserFingerprint(req) {
    /** –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ */
    const userAgent = req.headers['user-agent'] || '';
    const acceptLanguage = req.headers['accept-language'] || '';
    const referer = req.headers['referer'] || '';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ User-Agent
    if (!userAgent) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç User-Agent');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–æ–≤
    const botIndicators = [
        'bot', 'crawler', 'spider', 'scraper', 'monitor', 'checker',
        'python', 'requests', 'curl', 'wget', 'java', 'php', 'go-http'
    ];
    
    const userAgentLower = userAgent.toLowerCase();
    if (botIndicators.some(indicator => userAgentLower.includes(indicator))) {
        console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ—Ç:', userAgent);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if (!acceptLanguage) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Accept-Language');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ referrer (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
    if (!referer) {
        console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Referer');
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
    return true;
}

function validateRecaptchaResponse(responseToken) {
    /** –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ reCAPTCHA */
    if (!responseToken) {
        return false;
    }
        
    if (responseToken.length < 20 || responseToken.length > 1000) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    const validTokenRegex = /^[a-zA-Z0-9_-]+$/;
    if (!validTokenRegex.test(responseToken)) {
        return false;
    }
        
    return true;
}

async function verifyRecaptchaV2(responseToken) {
    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA v2 */
    const v2VerifyUrl = 'https://www.google.com/recaptcha/api/siteverify';
    const v2Payload = new URLSearchParams({
        secret: V2_SECRET,
        response: responseToken
    });
    
    try {
        const response = await axios.post(v2VerifyUrl, v2Payload.toString(), {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            timeout: 10000
        });
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA v2:', error.message);
        return { success: false };
    }
}

async function verifyRecaptchaV3(responseToken) {
    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA v3 */
    const v3VerifyUrl = 'https://www.google.com/recaptcha/api/siteverify';
    const v3Payload = new URLSearchParams({
        secret: V3_SECRET,
        response: responseToken
    });
    
    try {
        const response = await axios.post(v3VerifyUrl, v3Payload.toString(), {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            timeout: 10000
        });
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA v3:', error.message);
        return { success: false, score: 0.0 };
    }
}

function renderHTML(error = null) {
    try {
        let html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
        
        if (error) {
            html = html.replace('<!--ERROR-->', `<div class="error">${error}</div>`);
        } else {
            html = html.replace('<!--ERROR-->', '');
        }
        
        return html;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞:', error);
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <title>Security Verification</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #000; color: white; }
                .error { color: red; margin: 20px 0; padding: 10px; border: 1px solid red; background: rgba(255,0,0,0.1); }
                .container { max-width: 400px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Security Verification</h1>
                ${error ? `<div class="error">${error}</div>` : ''}
                <form method="POST">
                    <div class="g-recaptcha" data-sitekey="6LeIjfMrAAAAAGZvtV4NssePlRtOYbZz0TlU_QMH"></div>
                    <br/>
                    <button type="submit" style="padding: 10px 20px; background: #9d4edd; color: white; border: none; border-radius: 5px; cursor: pointer;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                </form>
            </div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
        </body>
        </html>`;
    }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', limiter, (req, res) => {
    res.set('Content-Type', 'text/html; charset=utf-8');
    res.send(renderHTML());
});

app.post('/', hourlyLimiter, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        if (!verifyBrowserFingerprint(req)) {
            console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
            return res.status(403).send(renderHTML('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.'));
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Ñ–æ—Ä–º—ã
        const v2Response = req.body['g-recaptcha-response'];
        const v3Response = req.body['g-recaptcha-v3-response'];

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!v2Response || !validateRecaptchaResponse(v2Response)) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–ø—á–∏');
            return res.send(renderHTML('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–ø—á–∏!'));
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ v2 –∏ v3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [v2Result, v3Result] = await Promise.all([
            verifyRecaptchaV2(v2Response),
            verifyRecaptchaV3(v3Response)
        ]);

        // –û—Ü–µ–Ω–∫–∞ v3 (score >= 0.5 —Å—á–∏—Ç–∞–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º)
        const v3Pass = v3Result.success && v3Result.score >= 0.5;

        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
            v2Success: v2Result.success,
            v3Success: v3Result.success,
            v3Score: v3Result.score,
            v3Pass: v3Pass
        });

        if (v2Result.success && v3Pass) {
            // –£–°–ü–ï–®–ù–û - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–π URL
            console.log(`‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${REDIRECT_URL}`);
            return res.redirect(302, REDIRECT_URL);
        } else {
            let errorMsg = '‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. ';
            if (!v2Result.success) {
                errorMsg += '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ v2. ';
                console.log('–û—à–∏–±–∫–∞ reCAPTCHA v2:', v2Result['error-codes']);
            }
            if (!v3Pass) {
                errorMsg += `–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: ${v3Result.score ? v3Result.score.toFixed(2) : '0.00'}.`;
                console.log('–û—à–∏–±–∫–∞ reCAPTCHA v3:', v3Result['error-codes']);
            }
            return res.send(renderHTML(errorMsg.trim()));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return res.status(500).send(renderHTML('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'));
    }
});

app.get('/style.css', (req, res) => {
    res.sendFile(path.join(__dirname, 'style.css'));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ rate limit
app.use((err, req, res, next) => {
    if (err.status === 429) {
        return res.status(429).send(renderHTML('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
    }
    next(err);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
